1. libc++ can be build and run as follows,

  (1). 
      ~/test/llvm-libc++-3.5/cmake_release_build$ cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_FLAGS=-std=c++11 -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" ../src

  (2). Set LD_LIBRARY_PATH="/home/cschen/test/llvm-libc++-3.5/cmake_release_build/lib" in ~/.bashrc as follows
      export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/cschen/test/0819-polly/cloog_install/lib:/home/cschen/test/0819-polly/llvm_build/lib:/home/cschen/test/llvm-libc++-3.5/cmake_release_build/lib"

  (3). 
      ~/test/lbd/docs/BackendTutorial/source_ExampleCode/InputFiles$ /home/cschen/test/llvm-libc++-3.5/cmake_release_build/bin/clang++ -stdlib=libc++ -I/home/cschen/test/llvm-libc++-3.5/src/projects/libcxx/include hello.cpp -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc

  (4). 
      ~/test/lbd/docs/BackendTutorial/source_ExampleCode/InputFiles$ ./a.out
      hello world

  (5). If you don't set LD_LIBRARY_PATH as (2), then it fail.


2. Native x86_64 can be built successfully by these commands as follows,

  cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_FLAGS=-std=c++11 -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" ../src

  CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DLIBCXX_CXX_ABI=libstdc++ -DLIBCXX_LIBSUPCXX_INCLUDE_PATHS="/usr/include/c++/4.8/;/usr/include/x86_64-linux-gnu/c++/4.8/" -DCMAKE_BUILD_TYPE=Release ../src


3. Arm cross compiler can be built and run successfully by commands,

	clang++ -target arm-linux-gnueabihf -isystem out-arm/include -isystem out-arm/include/c++/v1 -isystem /usr/arm-linux-gnueabihf/include -Lout-arm/lib -lc++ -lpthread -lc++abi -lm -lc -lgcc_s -lgcc hello-world.cpp -o a.out

	export "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib/:/usr/arm-linux-gnueabihf/lib/"

11. google libc++ benchmark:
https://github.com/google/benchmark


